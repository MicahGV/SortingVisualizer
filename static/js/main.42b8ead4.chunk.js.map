{"version":3,"sources":["assets/27d.jpg","util/get-random-numbers.ts","shared/colors.ts","sort/algos/sorts.model.ts","sort/algos/BubbleSort.ts","sort/algos/InsertionSort.ts","sort/algos/SelectionSort.ts","sort/algos/MergeSort.ts","sort/algos/Quicksort.ts","sort/algos/HeapSort.ts","shared/toolbar.tsx","sort/algos/easteregg.ts","sort/numbers/numbers.tsx","sort/numbers/number-canvas.tsx","util/uuid.ts","util/windows-resize.tsx","sort/numbers/number-column.tsx","sort/numbers/number-point.tsx","forms/list.tsx","sort/sort-control-panel.tsx","sort/sort.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getRandomNumbers","size","max","numbers","i","number","Math","floor","random","push","colors","color","backgroundColor","SortTypes","SortType","name","func","toString","this","SortTypesArray","props","j","end","length","updateSortState","timer","setInterval","selectedColumns","stopTimer","left","right","interval","num","minIdx","temp","groupSize","leftStart","rightStart","rightEnd","tempCursor","leftIndex","rightIndex","stack","low","high","partitionIndex","next","pop","pivot","nextI","largest","l","r","Toolbar","className","children","Component","updateBuffer","pixel","buffer","pixPos","data","NumberDisplayTypes","NumberCanvas","img","canvas","state","isLoaded","showCanvas","React","createRef","current","onload","setTimeout","EasterEgg","ctx","getContext","height","width","drawImage","imageData","getImageData","markedPixels","curRed","curBlue","curGreen","curAlpha","shuffle","setState","putImageData","k","clearInterval","setIntervalQuicksortEasterEgg","rando","style","display","justifyContent","margin","transition","ref","id","src","pic","uuidv4","replace","c","useWindowSize","useState","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Columns","numCols","map","idx","selectedColumn","selectedNumbers","filter","ncs","maxValue","windowHeight","lengthOfNumbers","widthPx","key","fontSize","lineHeight","textAlign","NumberColumn","windowWidth","position","alignItems","Points","numPoints","top","borderRadius","NumberPoint","NumberDisplayTypesArray","Numbers","numberDisplayType","Error","DropdownList","value","SelectedIdx","onChange","event","onUpdate","parseInt","target","Items","item","HorizontalList","options","CreateOptions","onClick","panelItemStyle","SortControlPanel","mouseIsOver","opacity","onMouseEnter","onMouseLeave","type","min","step","selectedNumberDisplay","onNumberDisplayChange","selectedSort","onSortMethodChange","onSortSize","sortSize","list","float","reset","startSort","Sort","easterEgg","setSortFunctionState","newSortFuncProps","sortType","onSortSizeChange","maxNumberValue","BubbleSort","defaultPrevented","undefined","unshift","join","flexDirection","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42b8ead4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/27d.366ef3d8.jpg\";","\r\nexport function getRandomNumbers(size: number, max: number): number[] {\r\n    let numbers = [];\r\n    for (let i = 0; i < size; i++) {\r\n        const number = Math.floor(Math.random() * max);\r\n        numbers.push(number);\r\n    }\r\n\r\n    return numbers;\r\n}\r\n","export const colors: React.CSSProperties[] = [\r\n    { color: \"#000\", backgroundColor: \"#e6f3ff\" },\r\n    { color: \"#000\", backgroundColor: \"#abd8ff\" },\r\n    { color: \"#fff\", backgroundColor: \"#58b1ff\" },\r\n    { color: \"#fff\", backgroundColor: \"#048aff\" },\r\n    { color: \"#fff\", backgroundColor: \"#005eaf\" },\r\n    { color: \"#fff\", backgroundColor: \"#062846\" },\r\n    { color: \"#fff\", backgroundColor: \"#002749\" },\r\n    { color: \"#fff\", backgroundColor: \"#002240\" },\r\n    { color: \"#fff\", backgroundColor: \"#001d37\" },\r\n    { color: \"#fff\", backgroundColor: \"#00182e\" }\r\n]","import { SortState } from \"../sort\";\r\nimport { setIntervalHeapSort } from \"./HeapSort\";\r\nimport { setIntervalQuicksort } from \"./Quicksort\";\r\nimport { setIntervalMergeSort } from \"./MergeSort\";\r\nimport { setIntervalInsertionSort } from \"./InsertionSort\";\r\nimport { SetIntervalSelectionSort } from \"./SelectionSort\";\r\nimport { SetIntervalBubbleSort } from \"./BubbleSort\";\r\n\r\nexport class SortType {\r\n    private name: string\r\n    public func: (props: Partial<SortState>) => void\r\n    constructor(name: string, func: (props: Partial<SortState>) => void) {\r\n        this.name = name;\r\n        this.func = func;\r\n    }\r\n    \r\n    public toString = () => {\r\n        return this.name;\r\n    }\r\n}\r\nexport enum SortTypes {\r\n    BubbleSort = 0,\r\n    SelectionSort = 1,\r\n    MergeSort = 2,\r\n    InsertionSort = 3,\r\n    QuickSort = 4,\r\n    HeapSor = 5\r\n}\r\nexport const SortTypesArray: SortType[] = [\r\n    new SortType(\"Bubble Sort\", SetIntervalBubbleSort),\r\n    new SortType(\"Insertion Sort\", setIntervalInsertionSort),\r\n    new SortType(\"Selection Sort\", SetIntervalSelectionSort),\r\n    new SortType(\"Merge Sort\", setIntervalMergeSort),\r\n    new SortType(\"Quick Sort\", setIntervalQuicksort),\r\n    new SortType(\"Heap Sort\", setIntervalHeapSort)\r\n]\r\n","import { SortState } from \"../sort\";\r\nimport { colors } from \"../../shared/colors\";\r\nimport { NumberDisplayState } from \"../numbers/numbers\";\r\nexport function BubbleSort(numbers: number[]) {\r\n    for (let i = 0; i < numbers.length; i++) {\r\n        for (let j = 0; j < numbers.length - i - 1; j++) { // -i because the right side should be sorted so don't have to touch it\r\n            if (numbers[j] > numbers[j + 1]) {\r\n                let left = numbers[j];\r\n                let right = numbers[j + 1];\r\n                numbers[j] = right;\r\n                numbers[j + 1] = left;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function SetIntervalBubbleSort(props: Partial<SortState>) {\r\n    let i = 0;\r\n    let j = 0;\r\n    let end = props.numbers.length - i - 1;\r\n    let sort = () => {\r\n        let selectedColumns: NumberDisplayState[] = []; // Needs to be outside of everything so I add additional columnsand reset each time sort is called\r\n        if (i === props.numbers.length - 1) {\r\n            props.stopTimer();\r\n            props.updateSortState({\r\n                selectedColumns: []\r\n            });\r\n        }\r\n        else {\r\n            if (props.numbers[j] > props.numbers[j + 1]) {\r\n                let left = props.numbers[j];\r\n                let right = props.numbers[j + 1];\r\n                props.numbers[j] = right;\r\n                props.numbers[j + 1] = left;\r\n                // I kind of hate this as I have to force React to update something it already has. There probably is a better way\r\n                props.updateSortState({ numbers: props.numbers });\r\n                selectedColumns.push({ number: j, color: colors[4].backgroundColor }, { number: j + 1, color: colors[3].backgroundColor });\r\n            }\r\n            if (j === end) {\r\n                i++;\r\n                j = 0;\r\n            }\r\n            else {\r\n                selectedColumns.push({ number: j, color: colors[3].backgroundColor });\r\n                j++;\r\n            }\r\n            props.updateSortState({\r\n                selectedColumns\r\n            });\r\n        }\r\n    };\r\n    props.updateSortState({\r\n        timer: setInterval(sort, props.interval) // Pass back so I can clear it from sort.tsx\r\n    });\r\n}\r\n","import { SortState } from \"../sort\";\r\nimport { colors } from \"../../shared/colors\";\r\nimport { NumberDisplayState } from \"../numbers/numbers\";\r\nexport function InsertionSort(numbers: number[]) {\r\n    for (let i = 1; i < numbers.length; i++) {\r\n        const num = numbers[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && num < numbers[j]) {\r\n            numbers[j + 1] = numbers[j];\r\n            j--;\r\n        }\r\n        numbers[j + 1] = num;\r\n    }\r\n}\r\nexport function setIntervalInsertionSort(props: Partial<SortState>) {\r\n    let i = 1;\r\n    let j = i - 1;\r\n    let num = props.numbers[i];\r\n    let sort = () => {\r\n        let selectedColumns: NumberDisplayState[] = [];\r\n        if (i === props.numbers.length) {\r\n            props.stopTimer();\r\n            props.updateSortState({\r\n                selectedColumns: []\r\n            });\r\n        }\r\n        else {\r\n            if (j >= 0 && num < props.numbers[j]) {\r\n                props.numbers[j + 1] = props.numbers[j];\r\n                selectedColumns.push({ color: colors[2].backgroundColor, number: j }, { color: colors[3].backgroundColor, number: j + 1 }, { color: colors[5].backgroundColor, number: i });\r\n                props.updateSortState({\r\n                    numbers: props.numbers,\r\n                    selectedColumns\r\n                });\r\n                j--;\r\n            }\r\n            else {\r\n                props.numbers[j + 1] = num;\r\n                selectedColumns.push({ color: colors[3].backgroundColor, number: j + 1 }, { color: colors[5].backgroundColor, number: i });\r\n                props.updateSortState({\r\n                    numbers: props.numbers,\r\n                    selectedColumns\r\n                });\r\n                i++;\r\n                j = i - 1;\r\n                num = props.numbers[i];\r\n            }\r\n        }\r\n    };\r\n    props.updateSortState({\r\n        timer: setInterval(sort, props.interval)\r\n    });\r\n}\r\n","import { SortState } from \"../sort\";\r\nimport { colors } from \"../../shared/colors\";\r\nimport { NumberDisplayState } from \"../numbers/numbers\";\r\nexport function SelectionSort(numbers: number[]) {\r\n    for (let i = 0; i < numbers.length; i++) {\r\n        let minIdx = i;\r\n        for (let j = i; j < numbers.length; j++) {\r\n            minIdx = numbers[minIdx] > numbers[j] ? j : minIdx;\r\n        }\r\n        let temp = numbers[i];\r\n        numbers[i] = numbers[minIdx];\r\n        numbers[minIdx] = temp;\r\n    }\r\n}\r\nexport function SetIntervalSelectionSort(props: Partial<SortState>) {\r\n    let i = 0;\r\n    let j = 0;\r\n    let minIdx = i;\r\n    let sort = () => {\r\n        if (i === props.numbers.length - 1) {\r\n            props.stopTimer();\r\n            props.updateSortState({\r\n                selectedColumns: []\r\n            });\r\n        }\r\n        else {\r\n            let selectedColumns: NumberDisplayState[] = [];\r\n            if (j === props.numbers.length) { // reset j loop and swap max with i's position\r\n                let temp = props.numbers[i];\r\n                props.numbers[i] = props.numbers[minIdx];\r\n                props.numbers[minIdx] = temp;\r\n                i++;\r\n                minIdx = i;\r\n                j = i;\r\n                // I kind of hate this as I have to force React to update something it already has. There probably is a better way\r\n                props.updateSortState({ numbers: props.numbers });\r\n                selectedColumns.push({ number: minIdx, color: colors[5].backgroundColor });\r\n            }\r\n            else { // Find max\r\n                minIdx = props.numbers[minIdx] > props.numbers[j] ? j : minIdx;\r\n                selectedColumns.push({ number: j, color: colors[1].backgroundColor }, { number: i, color: colors[7].backgroundColor }, { number: minIdx, color: colors[5].backgroundColor });\r\n                j++;\r\n            }\r\n            props.updateSortState({\r\n                selectedColumns\r\n            });\r\n        }\r\n    };\r\n    props.updateSortState({\r\n        timer: setInterval(sort, props.interval)\r\n    });\r\n}\r\n","import { SortState } from \"../sort\";\r\nimport { colors } from \"../../shared/colors\";\r\nimport { NumberDisplayState } from \"../numbers/numbers\";\r\nexport function MergeSort(numbers: number[]) {\r\n    let temp: number[] = [];\r\n    // Group sizes by 1 2 4 8 ...\r\n    for (let groupSize = 1; groupSize < numbers.length; groupSize *= 2) {\r\n        for (let leftStart = 0; leftStart + groupSize < numbers.length; leftStart += groupSize * 2) {\r\n            let rightStart = leftStart + groupSize; // rightStart is also LeftEnd\r\n            let rightEnd = rightStart + groupSize;\r\n            if (rightEnd > numbers.length) {\r\n                rightEnd = numbers.length;\r\n            }\r\n            let tempCursor = leftStart;\r\n            let leftIndex = leftStart;\r\n            let rightIndex = rightStart;\r\n            // Merge\r\n            while (leftIndex < rightStart && rightIndex < rightEnd) {\r\n                if (numbers[leftIndex] <= numbers[rightIndex]) {\r\n                    temp[tempCursor++] = numbers[leftIndex++];\r\n                }\r\n                else {\r\n                    temp[tempCursor++] = numbers[rightIndex++];\r\n                }\r\n            }\r\n            while (leftIndex < rightStart) {\r\n                temp[tempCursor++] = numbers[leftIndex++];\r\n            }\r\n            while (rightIndex < rightEnd) {\r\n                temp[tempCursor++] = numbers[rightIndex++];\r\n            }\r\n            for (tempCursor = leftStart; tempCursor < rightEnd; tempCursor++) {\r\n                numbers[tempCursor] = temp[tempCursor];\r\n            }\r\n        }\r\n    }\r\n}\r\n// TODO: Break down the while loops to show the incremental changes. Because it will be\r\n// cooler looking\r\nexport function setIntervalMergeSort(props: Partial<SortState>) {\r\n    let temp: number[] = [];\r\n    let groupSize = 1;\r\n    let leftStart = 0;\r\n    let sort = () => {\r\n        if (groupSize >= props.numbers.length) {\r\n            props.stopTimer();\r\n            props.updateSortState({\r\n                selectedColumns: []\r\n            });\r\n        }\r\n        else {\r\n            let selectedColumns: NumberDisplayState[] = [];\r\n            let rightStart = leftStart + groupSize; // rightStart is also LeftEnd\r\n            let rightEnd = rightStart + groupSize;\r\n            if (rightEnd > props.numbers.length) {\r\n                rightEnd = props.numbers.length;\r\n            }\r\n            let tempCursor = leftStart;\r\n            let leftIndex = leftStart;\r\n            let rightIndex = rightStart;\r\n            while (leftIndex < rightStart && rightIndex < rightEnd) {\r\n                if (props.numbers[leftIndex] <= props.numbers[rightIndex]) {\r\n                    temp[tempCursor++] = props.numbers[leftIndex++];\r\n                }\r\n                else {\r\n                    temp[tempCursor++] = props.numbers[rightIndex++];\r\n                }\r\n            }\r\n            while (leftIndex < rightStart) {\r\n                temp[tempCursor++] = props.numbers[leftIndex++];\r\n            }\r\n            while (rightIndex < rightEnd) {\r\n                temp[tempCursor++] = props.numbers[rightIndex++];\r\n            }\r\n            for (tempCursor = leftStart; tempCursor < rightEnd; tempCursor++) {\r\n                props.numbers[tempCursor] = temp[tempCursor];\r\n                selectedColumns.push({ number: tempCursor, color: colors[5].backgroundColor });\r\n                props.updateSortState({\r\n                    numbers: props.numbers,\r\n                    selectedColumns\r\n                });\r\n            }\r\n            // handle loops\r\n            if (leftStart + groupSize < props.numbers.length) {\r\n                leftStart += groupSize * 2;\r\n            }\r\n            else {\r\n                leftStart = 0;\r\n                groupSize *= 2;\r\n            }\r\n        }\r\n    };\r\n    props.updateSortState({\r\n        timer: setInterval(sort, props.interval)\r\n    });\r\n}\r\n","import { SortState } from \"../sort\";\r\nimport { colors } from \"../../shared/colors\";\r\nimport { NumberDisplayState } from \"../numbers/numbers\";\r\nexport function Quicksort(numbers: number[], low: number, high: number) {\r\n    if (low < high) {\r\n        const partitionIndex: number = Partition(numbers, low, high);\r\n        Quicksort(numbers, low, partitionIndex - 1);\r\n        Quicksort(numbers, partitionIndex + 1, high);\r\n    }\r\n}\r\nexport function IterativeQuicksort(numbers: number[]) {\r\n    let stack: {\r\n        low: number;\r\n        high: number;\r\n    }[] = [{ low: 0, high: numbers.length - 1 }];\r\n    while (stack.length > 0) {\r\n        const next = stack.pop();\r\n        if (next.low < next.high) {\r\n            const partitionIndex: number = Partition(numbers, next.low, next.high);\r\n            stack.push({ low: next.low, high: partitionIndex - 1 });\r\n            stack.push({ low: partitionIndex + 1, high: next.high });\r\n        }\r\n    }\r\n}\r\nexport function setIntervalQuicksort(props: Partial<SortState>) {\r\n    let stack: {\r\n        low: number;\r\n        high: number;\r\n    }[] = [{ low: 0, high: props.numbers.length - 1 }];\r\n    let partitionIndex: number = null;\r\n    let next = stack.pop();\r\n    let j = next.low;\r\n    let pivot = props.numbers[next.high];\r\n    let i = next.low - 1;\r\n    let sort = () => {\r\n        // TODO: Make this more readable and probably less convulated.\r\n        let selectedColumns: NumberDisplayState[] = [];\r\n        if (next === null && stack.length !== 0) {\r\n            next = stack.pop();\r\n            j = next.low;\r\n            pivot = props.numbers[next.high];\r\n            i = next.low - 1;\r\n            selectedColumns.push();\r\n        }\r\n        else if (next !== null) {\r\n            if (next.low < next.high) {\r\n                // const partitionIndex: number = Partition(props.numbers, next.low, next.high);\r\n                if (j <= next.high - 1) {\r\n                    if (props.numbers[j] < pivot) {\r\n                        i++;\r\n                        const temp = props.numbers[i];\r\n                        props.numbers[i] = props.numbers[j];\r\n                        props.numbers[j] = temp;\r\n                        selectedColumns.push({ color: colors[5].backgroundColor, number: next.high }, { color: colors[1].backgroundColor, number: next.low }, { color: colors[2].backgroundColor, number: i }, { color: colors[3].backgroundColor, number: j });\r\n                        props.updateSortState({\r\n                            numbers: props.numbers,\r\n                            selectedColumns\r\n                        });\r\n                    }\r\n                    j++;\r\n                }\r\n                else {\r\n                    const temp = props.numbers[i + 1];\r\n                    props.numbers[i + 1] = props.numbers[next.high];\r\n                    props.numbers[next.high] = temp;\r\n                    selectedColumns.push({ color: colors[5].backgroundColor, number: next.high }, { color: colors[3].backgroundColor, number: i + 1 }, { color: colors[8].backgroundColor, number: next.low });\r\n                    props.updateSortState({\r\n                        numbers: props.numbers,\r\n                        selectedColumns\r\n                    });\r\n                    partitionIndex = i + 1;\r\n                    stack.push({ low: next.low, high: partitionIndex - 1 });\r\n                    stack.push({ low: partitionIndex + 1, high: next.high });\r\n                    next = null;\r\n                }\r\n            }\r\n            else {\r\n                next = null;\r\n            }\r\n        }\r\n        else {\r\n            props.stopTimer();\r\n            props.updateSortState({\r\n                selectedColumns: []\r\n            });\r\n        }\r\n    };\r\n    props.updateSortState({\r\n        timer: setInterval(sort, props.interval)\r\n    });\r\n}\r\nfunction Partition(numbers: number[], low: number, high: number): number {\r\n    const pivot = numbers[high];\r\n    let i = low - 1;\r\n    for (let j = low; j <= high - 1; j++) {\r\n        if (numbers[j] < pivot) {\r\n            i++;\r\n            const temp = numbers[i];\r\n            numbers[i] = numbers[j];\r\n            numbers[j] = temp;\r\n        }\r\n    }\r\n    const temp = numbers[i + 1];\r\n    numbers[i + 1] = numbers[high];\r\n    numbers[high] = temp;\r\n    return (i + 1);\r\n}\r\n","import { SortState } from \"../sort\";\r\nimport { colors } from \"../../shared/colors\";\r\nimport { NumberDisplayState } from \"../numbers/numbers\";\r\nexport function HeapSort(numbers: number[]) {\r\n    // Build max heap\r\n    for (let i = Math.floor(numbers.length / 2) - 1; i >= 0; i--) {\r\n        heapify(numbers, numbers.length, i);\r\n    }\r\n    for (let i = numbers.length - 1; i >= 0; i--) {\r\n        let temp = numbers[0];\r\n        numbers[0] = numbers[i];\r\n        numbers[i] = temp;\r\n        heapify(numbers, i, 0);\r\n    }\r\n}\r\nexport function IterativeHeapSort(numbers: number[]) {\r\n    for (let i = Math.floor(numbers.length / 2) - 1; i >= 0; i--) {\r\n        iterativeHeapify(numbers, numbers.length, i);\r\n    }\r\n    for (let i = numbers.length - 1; i >= 0; i--) {\r\n        let temp = numbers[0];\r\n        numbers[0] = numbers[i];\r\n        numbers[i] = temp;\r\n        iterativeHeapify(numbers, i, 0);\r\n    }\r\n}\r\nexport function setIntervalHeapSort(props: Partial<SortState>) {\r\n    // First heapify\r\n    let i = Math.floor(props.numbers.length / 2);\r\n    let stack: [{\r\n        size: number;\r\n        nextI: number;\r\n    }] = [{ size: props.numbers.length, nextI: i }];\r\n    let j = props.numbers.length;\r\n    let sort = () => {\r\n        let selectedColumns: NumberDisplayState[] = [];\r\n        if (i >= 0) { // For loop\r\n            if (stack.length) {\r\n                let next = stack.pop();\r\n                let size = next.size;\r\n                let i = next.nextI;\r\n                let largest = i;\r\n                let l = 2 * i + 1;\r\n                let r = 2 * i + 2;\r\n                if (l < size && props.numbers[l] > props.numbers[largest]) {\r\n                    largest = l;\r\n                }\r\n                if (r < size && props.numbers[r] > props.numbers[largest]) {\r\n                    largest = r;\r\n                }\r\n                if (largest !== i) {\r\n                    let temp = props.numbers[i];\r\n                    props.numbers[i] = props.numbers[largest];\r\n                    props.numbers[largest] = temp;\r\n                    props.updateSortState({\r\n                        numbers: props.numbers,\r\n                    });\r\n                    selectedColumns.push({ number: i, color: colors[2].backgroundColor }, { number: largest, color: colors[5].backgroundColor });\r\n                    stack.push({ size: size, nextI: largest });\r\n                }\r\n            }\r\n            else {\r\n                i--;\r\n                if (i >= 0) {\r\n                    stack.push({ size: props.numbers.length, nextI: i });\r\n                }\r\n            }\r\n        }\r\n        else if (i < 0 && j >= 0) {\r\n            if (stack.length) {\r\n                let next = stack.pop();\r\n                let size = next.size;\r\n                let i = next.nextI;\r\n                let largest = i;\r\n                let l = 2 * i + 1;\r\n                let r = 2 * i + 2;\r\n                if (l < size && props.numbers[l] > props.numbers[largest]) {\r\n                    largest = l;\r\n                }\r\n                if (r < size && props.numbers[r] > props.numbers[largest]) {\r\n                    largest = r;\r\n                }\r\n                if (largest !== i) {\r\n                    let temp = props.numbers[i];\r\n                    props.numbers[i] = props.numbers[largest];\r\n                    props.numbers[largest] = temp;\r\n                    props.updateSortState({\r\n                        numbers: props.numbers\r\n                    });\r\n                    selectedColumns.push({ number: i, color: colors[2].backgroundColor }, { number: largest, color: colors[5].backgroundColor });\r\n                    stack.push({ size: size, nextI: largest });\r\n                }\r\n            }\r\n            else {\r\n                j--;\r\n                if (j >= 0) {\r\n                    let temp = props.numbers[0];\r\n                    props.numbers[0] = props.numbers[j];\r\n                    props.numbers[j] = temp;\r\n                    props.updateSortState({\r\n                        numbers: props.numbers,\r\n                        selectedColumns: [{ number: j, color: colors[2].backgroundColor }, { number: 0, color: colors[5].backgroundColor }]\r\n                    });\r\n                    stack.push({ size: j, nextI: 0 });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            props.stopTimer();\r\n        }\r\n        props.updateSortState({\r\n            selectedColumns: selectedColumns\r\n        });\r\n    };\r\n    props.updateSortState({\r\n        timer: setInterval(sort, props.interval)\r\n    });\r\n}\r\nfunction heapify(numbers: number[], size: number, i: number) {\r\n    let largest = i;\r\n    let l = 2 * i + 1;\r\n    let r = 2 * i + 2;\r\n    if (l < size && numbers[l] > numbers[largest]) {\r\n        largest = l;\r\n    }\r\n    if (r < size && numbers[r] > numbers[largest]) {\r\n        largest = r;\r\n    }\r\n    if (largest !== i) {\r\n        let temp = numbers[i];\r\n        numbers[i] = numbers[largest];\r\n        numbers[largest] = temp;\r\n        heapify(numbers, size, largest);\r\n    }\r\n}\r\nfunction iterativeHeapify(numbers: number[], initialSize: number, intialI: number) {\r\n    let stack: [[number, number]] = [[initialSize, intialI]];\r\n    while (stack.length) {\r\n        let pop = stack.pop();\r\n        let size = pop[0];\r\n        let i = pop[1];\r\n        let largest = i;\r\n        let l = 2 * i + 1;\r\n        let r = 2 * i + 2;\r\n        if (l < size && numbers[l] > numbers[largest]) {\r\n            largest = l;\r\n        }\r\n        if (r < size && numbers[r] > numbers[largest]) {\r\n            largest = r;\r\n        }\r\n        if (largest !== i) {\r\n            let temp = numbers[i];\r\n            numbers[i] = numbers[largest];\r\n            numbers[largest] = temp;\r\n            stack.push([size, largest]);\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './toolbar.css'\r\n\r\nexport default class Toolbar extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"toolbar\">\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export function setIntervalQuicksortEasterEgg(numbers: [number, number[]][], ctx, buffer) {\r\n    let stack: { low: number, high: number }[] = [{ low: 0, high: numbers.length - 1 }];\r\n    let partitionIndex: number = null;\r\n    let next = stack.pop();\r\n    let timer;\r\n    let j = next.low;\r\n    let pivot = numbers[next.high][0];\r\n    let i = next.low - 1;\r\n\r\n    let sort = () => {\r\n        for (let k = 0; k < 1000; k++) {\r\n            if (next === null && stack.length !== 0) {\r\n                next = stack.pop();\r\n                j = next.low;\r\n                pivot = numbers[next.high][0];\r\n                i = next.low - 1;\r\n            } else if (next !== null) {\r\n                if (next.low < next.high) {\r\n                    // const partitionIndex: number = Partition(numbers, next.low, next.high);\r\n                    if (j <= next.high - 1) {\r\n                        if (numbers[j][0] < pivot) {\r\n                            i++;\r\n                            const temp = numbers[i];\r\n                            numbers[i] = numbers[j];\r\n                            numbers[j] = temp;\r\n                            updateBuffer(numbers[i], buffer)\r\n                            updateBuffer(numbers[j], buffer)\r\n                            ctx.putImageData(buffer, 0, 0);\r\n                        }\r\n                        j++;\r\n                    } else {\r\n                        const temp = numbers[i + 1];\r\n                        numbers[i + 1] = numbers[next.high];\r\n                        numbers[next.high] = temp;\r\n                        updateBuffer(numbers[i + 1], buffer)\r\n                        updateBuffer(numbers[next.high], buffer)\r\n                        ctx.putImageData(buffer, 0, 0);\r\n\r\n                        partitionIndex = i + 1;\r\n                        stack.push({ low: next.low, high: partitionIndex - 1 })\r\n                        stack.push({ low: partitionIndex + 1, high: next.high })\r\n\r\n                        next = null;\r\n                    }\r\n                } else {\r\n                    next = null;\r\n                }\r\n            } else {\r\n                clearInterval(timer);\r\n            }\r\n        }\r\n    }\r\n    timer = setInterval(sort, 0)\r\n}\r\n\r\n\r\nfunction setIntervalCountingSort(markedPixels: any[], imageData: ImageData, ctx: CanvasRenderingContext2D) {\r\n    let i = 0;\r\n    let start = 0;\r\n    let end = 0;\r\n    let intervals = 100;\r\n    let timer = setInterval(() => {\r\n        if (i > intervals - 1) {\r\n            clearInterval(timer);\r\n        }\r\n        start = Math.floor(markedPixels.length / intervals * i);\r\n        end = Math.floor(markedPixels.length / intervals * i + markedPixels.length / intervals);\r\n        end = Math.min(end, markedPixels.length);\r\n        for (let j = start; j < end; j++) {\r\n            const pixel = markedPixels[j];\r\n            const pixPos = pixel[0];\r\n            imageData.data[pixPos * 4] = pixel[1][0];\r\n            imageData.data[pixPos * 4 + 1] = pixel[1][1];\r\n            imageData.data[pixPos * 4 + 2] = pixel[1][2];\r\n            imageData.data[pixPos * 4 + 3] = pixel[1][3];\r\n        }\r\n        i++;\r\n        ctx.putImageData(imageData, 0, 0);\r\n    }, 50);\r\n}\r\n\r\nfunction updateBuffer(pixel, buffer) {\r\n    const pixPos = pixel[0];\r\n    buffer.data[pixPos * 4] = pixel[1][0];\r\n    buffer.data[pixPos * 4 + 1] = pixel[1][1];\r\n    buffer.data[pixPos * 4 + 2] = pixel[1][2];\r\n    buffer.data[pixPos * 4 + 3] = pixel[1][3];\r\n}","import React from 'react'\r\nimport { Color } from 'csstype'\r\nimport NumberCanvas from './number-canvas';\r\nimport Columns from './number-column';\r\nimport Points from './number-point';\r\n\r\nexport enum NumberDisplayTypes {\r\n    Columns = 0,\r\n    Points = 1,\r\n    EasterEgg = 2\r\n}\r\n\r\nexport const NumberDisplayTypesArray = [\"Columns\", \"Points\"]\r\n\r\nexport interface NumbersProps {\r\n    numberDisplayType: NumberDisplayTypes,\r\n    numbers: number[],\r\n    selectedNumbers: NumberDisplayState[],\r\n    maxValue: number\r\n}\r\n\r\nexport interface NumberDisplayState {\r\n    number: number,\r\n    color: Color,\r\n    lengthOfNumbers?: number,\r\n    idx?: number,\r\n    windowWidth?: number,\r\n    windowHeight?: number,\r\n    maxValue?: number\r\n}\r\n\r\nexport default function Numbers(props: NumbersProps) {\r\n    let numbers: JSX.Element;\r\n    switch (props.numberDisplayType) {\r\n        case NumberDisplayTypes.Columns:\r\n            numbers = Columns(props);\r\n            break;\r\n        case NumberDisplayTypes.Points:\r\n            numbers = Points(props);\r\n            break;\r\n        case NumberDisplayTypes.EasterEgg:\r\n            numbers = <NumberCanvas />\r\n            break;\r\n        default:\r\n            throw Error(\"Numbers Display Type is Required\");\r\n    }\r\n    return numbers;\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport pic from '../../assets/27d.jpg';\r\nimport { setIntervalQuicksortEasterEgg } from '../algos/easteregg';\r\n\r\nexport default class NumberCanvas extends Component<{}, { isLoaded: boolean, showCanvas: boolean }> {\r\n    private img: React.RefObject<HTMLImageElement>\r\n    private canvas: React.RefObject<HTMLCanvasElement>\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { isLoaded: false, showCanvas: false }\r\n        this.img = React.createRef();\r\n        this.canvas = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.img.current.onload = () => {\r\n            setTimeout(() => this.EasterEgg(), 1000);\r\n        }\r\n    }\r\n\r\n    private EasterEgg() {\r\n        let ctx = this.canvas.current.getContext(\"2d\");\r\n\r\n        this.canvas.current.height = this.img.current.height;\r\n        this.canvas.current.width = this.img.current.width;\r\n        ctx.drawImage(this.img.current, 0, 0);\r\n        let imageData = ctx.getImageData(0, 0, this.canvas.current.width, this.canvas.current.height);\r\n        // Mark the positions\r\n        let markedPixels = [];\r\n        for (let i = imageData.data.length - 4; i >= 0; i -= 4) { // Fisher Yates Shuffle\r\n            let curRed = imageData.data[i];\r\n            let curBlue = imageData.data[i + 1];\r\n            let curGreen = imageData.data[i + 2];\r\n            let curAlpha = imageData.data[i + 3];\r\n            markedPixels[i / 4] = [i / 4, [curRed, curBlue, curGreen, curAlpha]];\r\n        }\r\n        // Shuffle the positions a few times\r\n        this.shuffle(markedPixels, imageData);\r\n        this.setState({ isLoaded: true });\r\n\r\n        setTimeout(() => {\r\n            ctx.putImageData(imageData, 0, 0)\r\n            setIntervalQuicksortEasterEgg(markedPixels, ctx, imageData);\r\n        }, 1000);\r\n\r\n    }\r\n\r\n    private shuffle(markedPixels: any[], imageData: ImageData) {\r\n        for (let k = 0; k < 3; k++) {\r\n            for (let j = 0; j < markedPixels.length; j++) {\r\n                let random = Math.floor(Math.random() * markedPixels.length);\r\n                const pixel = markedPixels[j];\r\n                const rando = markedPixels[random];\r\n                markedPixels[j] = rando;\r\n                markedPixels[random] = pixel;\r\n                // Swap it in the buffer as well\r\n                imageData.data[pixel[1] * 4] = rando[1][0];\r\n                imageData.data[pixel[1] * 4 + 1] = rando[1][1];\r\n                imageData.data[pixel[1] * 4 + 2] = rando[1][2];\r\n                imageData.data[pixel[1] * 4 + 3] = rando[1][3];\r\n                imageData.data[random * 4] = pixel[1][0];\r\n                imageData.data[random * 4 + 1] = pixel[1][1];\r\n                imageData.data[random * 4 + 2] = pixel[1][2];\r\n                imageData.data[random * 4 + 3] = pixel[1][3];\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let height = 100;\r\n        let width = 100;\r\n        if (this.state.isLoaded) {\r\n            height = this.canvas.current.height\r\n            width = this.canvas.current.width\r\n            setTimeout(() => this.setState({showCanvas: true}), 1050)\r\n        }\r\n        return (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", margin: \"auto\" }}\r\n                className={`slide-in-right`}>\r\n                <div style={{\r\n                    display: `${this.state.showCanvas ? \"none\" : \"initial\"}`,\r\n                    transition: \".8s ease-out all\",\r\n                    height: `${height}px`, width: `${width}px`, backgroundColor: \"grey\"\r\n                }}\r\n                className={`${!this.state.isLoaded ? \"vibrate-1\" : \"\"}`}\r\n                ></div>\r\n                <canvas\r\n                    style={{ display: `${!this.state.showCanvas ? \"none\" : \"initial\"}` }}\r\n                    height={400} width={400} ref={this.canvas} id=\"canvas\"></canvas>\r\n                <img ref={this.img} src={pic} style={{ display: \"none\" }} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","export function uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        // eslint-disable-next-line\r\n        var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n","import { useLayoutEffect, useState } from 'react';\r\n\r\nexport function useWindowSize() {\r\n  const [size, setSize] = useState([0, 0]);\r\n  useLayoutEffect(() => {\r\n    function updateSize() {\r\n      setSize([window.innerWidth, window.innerHeight]);\r\n    }\r\n    window.addEventListener('resize', updateSize);\r\n    updateSize();\r\n    return () => window.removeEventListener('resize', updateSize);\r\n  }, []);\r\n  return size;\r\n}","import React from 'react'\r\nimport { uuidv4 } from '../../util/uuid'\r\nimport { NumberDisplayState, NumbersProps } from './numbers';\r\nimport { colors } from '../../shared/colors';\r\nimport { useWindowSize } from '../../util/windows-resize';\r\n\r\nexport default function Columns(props: NumbersProps) {\r\n    const [width, height] = useWindowSize();\r\n    let numCols = props.numbers.map((number, idx) => {\r\n        let selectedColumn = props.selectedNumbers.filter(ncs => ncs.number === idx);\r\n        let color = colors[3].backgroundColor;\r\n        if (selectedColumn.length > 0) {\r\n            color = selectedColumn[0].color\r\n        }\r\n        let numberState: NumberDisplayState = {\r\n            number: number,\r\n            color: color,\r\n            lengthOfNumbers: props.numbers.length,\r\n            idx: idx,\r\n            windowWidth: width,\r\n            windowHeight: height,\r\n            maxValue: props.maxValue\r\n        };\r\n        return NumberColumn(numberState);\r\n    });\r\n    return (\r\n        <div style={{\r\n            position: \"relative\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            height: `${height}px`,\r\n            width: \"calc(100% - 10px)\",\r\n            margin: \"10px 5px 0 5px\"\r\n        }}>\r\n            {numCols}\r\n        </div>)\r\n}\r\n\r\nfunction NumberColumn(props: NumberDisplayState) {\r\n    let height = `${(props.number/props.maxValue * (props.windowHeight-100))}px`;\r\n    let width = (window.innerWidth - 20) / props.lengthOfNumbers\r\n    let number = width > 20 ? props.number : \"\";\r\n    let widthPx = width + 'px';\r\n    return (\r\n        <div key={uuidv4()} style={{\r\n            height: height,\r\n            width: widthPx,\r\n            fontSize: \"10px\",\r\n            backgroundColor: props.color,\r\n            color: \"white\",\r\n            lineHeight: height,\r\n            textAlign: 'center'\r\n        }}>\r\n            {number}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { uuidv4 } from '../../util/uuid'\r\nimport { NumberDisplayState, NumbersProps } from './numbers'\r\nimport { useWindowSize } from '../../util/windows-resize';\r\nimport { colors } from '../../shared/colors';\r\n\r\nexport default function Points(props: NumbersProps) {\r\n    const [width, height] = useWindowSize();\r\n    let numPoints = props.numbers.map((number, idx) => {\r\n        let selectedColumn = props.selectedNumbers.filter(ncs => ncs.number === idx);\r\n        let color = colors[3].backgroundColor;\r\n        if (selectedColumn.length > 0) {\r\n            color = selectedColumn[0].color\r\n        }\r\n        let numberState: NumberDisplayState = {\r\n            number: number,\r\n            color: color,\r\n            lengthOfNumbers: props.numbers.length,\r\n            idx: idx,\r\n            windowWidth: width,\r\n            windowHeight: height,\r\n            maxValue: props.maxValue\r\n        };\r\n        return NumberPoint(numberState);\r\n    });\r\n\r\n    return (\r\n        <div style={{\r\n            position: \"relative\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            height: `${height}px`,\r\n            width: \"calc(100% - 10px)\",\r\n            margin: \"10px 5px 0 5px\",\r\n        }}>\r\n            {numPoints}\r\n        </div>)\r\n}\r\n\r\n\r\nfunction NumberPoint(props: NumberDisplayState) {\r\n    return (\r\n        <div key={uuidv4()} style={{\r\n            top: `${(props.number/props.maxValue * (props.windowHeight-100))}px`,\r\n            left: `${(props.windowWidth - 10) * props.idx / props.lengthOfNumbers}px`,\r\n            position: \"absolute\",\r\n            height: \"5px\",\r\n            width: \"5px\",\r\n            borderRadius: \"100%\",\r\n            backgroundColor: props.color,\r\n            color: \"white\",\r\n        }} />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './list.css'\r\n\r\nexport interface ListProps<T> {\r\n    Items: T[],\r\n    onUpdate(idx: number): void,\r\n    SelectedIdx: number\r\n}\r\n\r\nexport function DropdownList<T>(props: ListProps<T>) {\r\n    return (\r\n        <select value={props.SelectedIdx} onChange={(event) => props.onUpdate(parseInt(event.target.value))}>\r\n            {props.Items.map((item: T, idx: number) => \r\n            <option key={item.toString() + idx} value={idx}>{item.toString()}</option>)}\r\n        </select>\r\n    );\r\n}\r\nexport function VerticalList<T>(props: ListProps<T>) {\r\n    let options = CreateOptions(props);\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'space-around'\r\n        }}>\r\n            {options}\r\n        </div>\r\n    );\r\n}\r\nexport function HorizontalList<T>(props: ListProps<T>) {\r\n    let options = CreateOptions(props);\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-around'\r\n        }}>\r\n            {options}\r\n        </div >\r\n    );\r\n}\r\n\r\nfunction CreateOptions<T>(props: ListProps<T>) {\r\n    let options = props.Items.map((item: T, idx: number) => {\r\n        return (\r\n            <div\r\n                key={item.toString() + idx}\r\n                onClick={(event) => props.onUpdate(idx)}\r\n                className={`${props.SelectedIdx === idx ? 'selected' : ''}`}>\r\n                <div>\r\n                    {item.toString()}\r\n                </div>\r\n            </div>\r\n        )\r\n    });\r\n    return options;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { SortState } from './sort'\r\nimport { NumberDisplayTypesArray, NumberDisplayTypes } from './numbers/numbers'\r\nimport { DropdownList } from '../forms/list';\r\nimport { SortTypesArray, SortTypes } from './algos/sorts.model';\r\n\r\n// TODO: Refine this more\r\n\r\nconst panelItemStyle: React.CSSProperties = {\r\n    display: 'flex',\r\n    margin: \"4px 0px\",\r\n    justifyContent: \"space-between\"\r\n}\r\n\r\nexport interface SortControlPanelProps extends Partial<SortState> {\r\n    onSortSize(value: number): void,\r\n    reset(): void,\r\n    startSort(): void,\r\n    onSortMethodChange(sortType: SortTypes): void,\r\n    onNumberDisplayChange(numberDisplayType: NumberDisplayTypes): void,\r\n}\r\nexport default function SortControlPanel(props: SortControlPanelProps) {\r\n    const [state, setState] = useState({ mouseIsOver: false });\r\n    let onMouseEnter = () => setState({ mouseIsOver: true });\r\n    let onMouseLeave = () => setState({ mouseIsOver: false });\r\n    return (\r\n        <div\r\n            style={{ opacity: `${!state.mouseIsOver ? .9 : 1}` }}\r\n            onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} className=\"sortOptions\">\r\n            <div style={{ display: 'flex' }}>\r\n                <label>Timing Interval: </label>\r\n                <input\r\n                    type=\"range\"\r\n                    min=\"0\" max=\"1000\"\r\n                    value={props.interval}\r\n                    onChange={(event) => props.updateSortState({\r\n                        interval: parseInt(event.target.value)\r\n                    })}\r\n                    step=\"50\" />\r\n                <span style={{ width: '50px' }}>\r\n                    {props.interval}ms\r\n                </span>\r\n            </div>\r\n\r\n            <div style={panelItemStyle}>\r\n                <label>Display Type:</label>\r\n                <DropdownList\r\n                    Items={NumberDisplayTypesArray}\r\n                    SelectedIdx={props.selectedNumberDisplay}\r\n                    onUpdate={props.onNumberDisplayChange} />\r\n            </div>\r\n            <div style={panelItemStyle}>\r\n                <label>Sort Method:</label>\r\n                <DropdownList\r\n                    Items={SortTypesArray}\r\n                    SelectedIdx={props.selectedSort}\r\n                    onUpdate={props.onSortMethodChange} />\r\n            </div>\r\n            <div style={panelItemStyle}>\r\n                <label>Number of {NumberDisplayTypesArray[props.selectedNumberDisplay]}: </label>\r\n                <input type=\"number\"\r\n                    onChange={(event) => props.onSortSize(parseInt(event.target.value))}\r\n                    value={props.sortSize}\r\n                    min=\"1\" max=\"200\"\r\n                    list=\"tickmarks\"\r\n                />\r\n            </div>\r\n\r\n            <div style={{ float: 'right' }}>\r\n                <button onClick={props.reset}>Reset</button>\r\n                <button onClick={props.startSort}> Sort</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { getRandomNumbers } from '../util/get-random-numbers';\r\nimport { SortTypes, SortTypesArray } from './algos/sorts.model';\r\nimport Toolbar from '../shared/toolbar';\r\nimport \"./sort.scss\"\r\nimport Numbers, { NumberDisplayTypes, NumberDisplayState, NumberDisplayTypesArray } from './numbers/numbers';\r\nimport { HorizontalList } from '../forms/list';\r\nimport SortControlPanel from './sort-control-panel';\r\n\r\n// TODO: BOGOSORT\r\n\r\nexport interface SortState {\r\n    interval: number,\r\n    timer: any,\r\n    selectedColumns: NumberDisplayState[], //TODO: Make this independent from NumberDisplayState\r\n    selectedNumberDisplay: NumberDisplayTypes,\r\n    updateSortState: UpdateSortStateFunction,\r\n    stopTimer(): void,\r\n    numbers: number[],\r\n    sortSize: number,\r\n    maxNumberValue: number,\r\n    selectedSort: number\r\n}\r\n\r\nexport interface UpdateSortStateFunction {\r\n    (props: Partial<SortState>)\r\n}\r\n\r\nexport default class Sort extends Component<any, SortState, {}> {\r\n\r\n    private easterEgg: string[] = []\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortSize: 10,\r\n            selectedSort: SortTypes.BubbleSort,\r\n            selectedNumberDisplay: NumberDisplayTypes.Columns,\r\n            interval: 100,\r\n            timer: -1,\r\n            selectedColumns: [],\r\n            updateSortState: this.setSortFunctionState,\r\n            stopTimer: this.stopTimer,\r\n            maxNumberValue: 500,\r\n            numbers: getRandomNumbers(10, 500), // 10 is the initial size 200 the max value\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"keydown\", (event) => {\r\n\r\n            if (event.defaultPrevented) {\r\n                return; // Should do nothing if the default action has been cancelled\r\n            }\r\n\r\n            if (event.key !== undefined) {\r\n                this.easterEgg.unshift(event.key)\r\n                if (this.easterEgg.length >= 5) {\r\n                    this.easterEgg.pop();\r\n                }\r\n\r\n                if (this.easterEgg.join(\"\") === \"meme\") {\r\n                    this.setState({ selectedNumberDisplay: NumberDisplayTypes.EasterEgg });\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    setSortFunctionState: UpdateSortStateFunction = (newSortFuncProps) => {\r\n        this.setState({\r\n            ...this.state,\r\n            ...newSortFuncProps\r\n        });\r\n    }\r\n\r\n    stopTimer = () => {\r\n        clearInterval(this.state.timer);\r\n    }\r\n\r\n    startSort = () => {\r\n        clearInterval(this.state.timer); // Clear anyway\r\n        let selectedSort = SortTypesArray[this.state.selectedSort];\r\n        selectedSort.func(this.state);\r\n    }\r\n\r\n    onSortMethodChange = (sortType: SortTypes) => {\r\n        this.setState({\r\n            selectedSort: sortType,\r\n        })\r\n        this.reset();\r\n    }\r\n\r\n    onNumberDisplayChange = (numberDisplayType: NumberDisplayTypes) => {\r\n        this.setState({\r\n            selectedNumberDisplay: numberDisplayType,\r\n        })\r\n    }\r\n\r\n    onSortSizeChange = (value: number) => {\r\n        this.setState({\r\n            sortSize: value\r\n        })\r\n        // I apparently have to wait otherwise it won't render the new size\r\n        setTimeout(this.reset, 50);\r\n    }\r\n\r\n    reset = () => {\r\n        clearInterval(this.state.timer);\r\n        this.setState({\r\n            numbers: getRandomNumbers(this.state.sortSize, this.state.maxNumberValue),\r\n            selectedColumns: []\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                height: \"100vh\"\r\n            }}>\r\n                <Toolbar>\r\n                    <HorizontalList\r\n                        Items={NumberDisplayTypesArray}\r\n                        SelectedIdx={this.state.selectedNumberDisplay}\r\n                        onUpdate={this.onNumberDisplayChange} />\r\n                    <HorizontalList\r\n                        Items={SortTypesArray}\r\n                        SelectedIdx={this.state.selectedSort}\r\n                        onUpdate={this.onSortMethodChange} />\r\n                </Toolbar>\r\n                <SortControlPanel {...this.state}\r\n                    onSortSize={this.onSortSizeChange}\r\n                    reset={this.reset}\r\n                    startSort={this.startSort}\r\n                    onSortMethodChange={this.onSortMethodChange}\r\n                    onNumberDisplayChange={this.onNumberDisplayChange} />\r\n\r\n\r\n                <Numbers\r\n                    numbers={this.state.numbers}\r\n                    selectedNumbers={this.state.selectedColumns}\r\n                    numberDisplayType={this.state.selectedNumberDisplay}\r\n                    maxValue={this.state.maxNumberValue}\r\n                />\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Sort from './sort/sort';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Sort/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}